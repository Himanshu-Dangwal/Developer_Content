// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id       Int     @id @default(autoincrement())
//   username String  @unique
//   phoneNo  String?
//   password String
// }

model Blog {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  tag         String[]  @default(["General"])
  imageUrl    String    @default("")
  userId      Int? // Foreign key to the User model
  user        User?     @relation("UserBlogs", fields: [userId], references: [id])
  username    String
  upvote      Int       @default(0)
  downvote    Int       @default(0)
  votedBy     User[]    @relation("VotedBlogs")
  comments    Comment[] @relation("BlogComments")
  later       User[]    @relation("LaterBlogs")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id              Int       @id @default(autoincrement())
  userId          Int? // Foreign key to the User model
  user            User?     @relation("UserComments", fields: [userId], references: [id])
  message         String
  like            Int       @default(0)
  isNested        Boolean
  parentCommentId Int? // Foreign key to the parent Comment
  parentComment   Comment?  @relation("NestedComments", fields: [parentCommentId], references: [id])
  blogId          Int? // Foreign key to the Blog model
  blog            Blog?     @relation("BlogComments", fields: [blogId], references: [id])
  nestedComments  Comment[] @relation("NestedComments")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model User {
  id                  Int       @id @default(autoincrement())
  username            String    @unique
  password            String
  email               String    @unique
  blogs               Blog[]    @relation("UserBlogs")
  votedBlogs          Blog[]    @relation("VotedBlogs")
  comments            Comment[] @relation("UserComments")
  later               Blog[]    @relation("LaterBlogs")
  resetPasswordToken  String?
  resetPasswordExpire DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}
